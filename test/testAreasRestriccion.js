/**
 * Prueba de concepto para la restricci√≥n de m√°ximo 2 √°reas por participante
 * Este es un ejemplo de implementaci√≥n que se puede aplicar en la base de datos
 */

// Datos simulados
const competidores = [
  { id: 'comp-1', nombre: 'Competidor 1' },
  { id: 'comp-2', nombre: 'Competidor 2' },
  { id: 'comp-3', nombre: 'Competidor 3' }
];

const areas = [
  { id: 1, nombre: 'Matem√°tica' },
  { id: 2, nombre: 'F√≠sica' },
  { id: 3, nombre: 'Qu√≠mica' },
  { id: 4, nombre: 'Inform√°tica' }
];

const convocatorias = [
  { id: 1, nombre: 'Olimpiada 2025' }
];

// Sistema de almacenamiento simulado
const inscripciones = [];

// Funci√≥n para inscribir a un competidor en un √°rea
function inscribirEnArea(competidorId, areaId, convocatoriaId) {
  console.log(`üìù Intentando inscribir al competidor ${competidorId} en el √°rea ${areaId}`);
  
  // Verificar si ya est√° inscrito en esta √°rea
  const yaInscrito = inscripciones.some(
    insc => insc.competidorId === competidorId && 
            insc.areaId === areaId && 
            insc.convocatoriaId === convocatoriaId
  );
  
  if (yaInscrito) {
    console.log('‚ö†Ô∏è El competidor ya est√° inscrito en esta √°rea');
    return false;
  }
  
  // Verificar cu√°ntas √°reas tiene asignadas el competidor en esta convocatoria
  const areasAsignadas = inscripciones.filter(
    insc => insc.competidorId === competidorId && 
            insc.convocatoriaId === convocatoriaId
  ).length;
  
  console.log(`‚ÑπÔ∏è El competidor est√° inscrito en ${areasAsignadas} √°reas`);
  
  // Aplicar la restricci√≥n de m√°ximo 2 √°reas por participante
  if (areasAsignadas >= 2) {
    console.error('‚ùå ERROR: No se puede inscribir en m√°s de 2 √°reas por convocatoria');
    return false;
  }
  
  // Buscar nombres para el log
  const competidor = competidores.find(c => c.id === competidorId);
  const area = areas.find(a => a.id === areaId);
  
  // Registrar la inscripci√≥n
  inscripciones.push({
    id: Date.now(),
    competidorId,
    areaId,
    convocatoriaId,
    fecha: new Date()
  });
  
  console.log(`‚úÖ ${competidor.nombre} inscrito con √©xito en el √°rea ${area.nombre}`);
  return true;
}

// Funci√≥n para obtener las √°reas de un competidor
function obtenerAreasCompetidor(competidorId, convocatoriaId) {
  const areasDelCompetidor = inscripciones
    .filter(insc => insc.competidorId === competidorId && insc.convocatoriaId === convocatoriaId)
    .map(insc => {
      const area = areas.find(a => a.id === insc.areaId);
      return area;
    });
  
  return areasDelCompetidor;
}

// Funci√≥n principal para ejecutar las pruebas
function ejecutarPruebas() {
  console.log('üöÄ PRUEBA DE CONCEPTO: Restricci√≥n de m√°ximo 2 √°reas por participante');
  console.log('====================================================================\n');
  
  const competidor = competidores[0];
  const convocatoria = convocatorias[0];
  
  console.log(`Competidor: ${competidor.nombre} (${competidor.id})`);
  console.log(`Convocatoria: ${convocatoria.nombre} (${convocatoria.id})`);
  console.log('-------------------------------------------------------------------\n');
  
  console.log('üìù PRUEBA 1: Inscribir en primera √°rea (debe funcionar)');
  inscribirEnArea(competidor.id, areas[0].id, convocatoria.id);
  
  console.log('\nüìù PRUEBA 2: Inscribir en segunda √°rea (debe funcionar)');
  inscribirEnArea(competidor.id, areas[1].id, convocatoria.id);
  
  console.log('\nüìù PRUEBA 3: Intentar inscribir en tercera √°rea (debe fallar)');
  const resultado = inscribirEnArea(competidor.id, areas[2].id, convocatoria.id);
  
  console.log('\nüìù PRUEBA 4: Intentar inscribir otra vez en primera √°rea (debe indicar que ya est√° inscrito)');
  inscribirEnArea(competidor.id, areas[0].id, convocatoria.id);
  
  // Mostrar el resumen de inscripciones
  const areasInscritas = obtenerAreasCompetidor(competidor.id, convocatoria.id);
  
  console.log('\nüìã Resumen de inscripciones:');
  console.log(`- Competidor: ${competidor.nombre}`);
  console.log(`- Convocatoria: ${convocatoria.nombre}`);
  console.log(`- Total √°reas inscritas: ${areasInscritas.length}`);
  
  areasInscritas.forEach((area, index) => {
    console.log(`  ${index + 1}. ${area.nombre}`);
  });
  
  if (!resultado) {
    console.log('\n‚úÖ LA PRUEBA FUE EXITOSA: La restricci√≥n de m√°ximo 2 √°reas funciona correctamente');
  } else {
    console.error('\n‚ùå ERROR: La restricci√≥n de m√°ximo 2 √°reas no funcion√≥');
  }
}

// Ejecutar las pruebas
ejecutarPruebas(); 