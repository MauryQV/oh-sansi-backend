import prisma from '../src/config/prismaClient.js';

/**
 * Script para simular y probar la restricci√≥n de m√°ximo 2 √°reas por participante
 * Este script no modifica el esquema de la base de datos, sino que simula el comportamiento
 * que tendr√≠a la restricci√≥n de m√°ximo 2 √°reas por participante
 */

// Funci√≥n para simular la inscripci√≥n de un participante en un √°rea
async function simularInscripcion(competidorId, areas, convocatoriaId) {
  console.log('Iniciando simulaci√≥n de inscripci√≥n con restricci√≥n de m√°ximo 2 √°reas por participante');
  console.log('-------------------------------------------------------------------');
  
  // Validar que el competidor exista
  const competidor = await prisma.competidor.findUnique({
    where: { id: competidorId }
  });
  
  if (!competidor) {
    console.error('‚ùå ERROR: No se encontr√≥ el competidor con ID:', competidorId);
    return;
  }
  
  console.log('‚úÖ Competidor encontrado:', competidor.id);
  
  // Validar que la convocatoria exista
  const convocatoria = await prisma.convocatoria.findUnique({
    where: { id: convocatoriaId }
  });
  
  if (!convocatoria) {
    console.error('‚ùå ERROR: No se encontr√≥ la convocatoria con ID:', convocatoriaId);
    return;
  }
  
  console.log('‚úÖ Convocatoria encontrada:', convocatoria.nombre_convocatoria);
  
  // Verificar que las √°reas existan y est√©n asignadas a la convocatoria
  const areasValidas = [];
  for (const areaId of areas) {
    const area = await prisma.area.findUnique({
      where: { id: areaId }
    });
    
    if (!area) {
      console.error('‚ùå ERROR: No se encontr√≥ el √°rea con ID:', areaId);
      continue;
    }
    
    const asignacion = await prisma.area_convocatoria.findFirst({
      where: {
        area_id: areaId,
        convocatoria_id: convocatoriaId
      }
    });
    
    if (!asignacion) {
      console.error('‚ùå ERROR: El √°rea', area.nombre_area, 'no est√° asignada a la convocatoria');
      continue;
    }
    
    areasValidas.push({ id: areaId, nombre: area.nombre_area });
  }
  
  if (areasValidas.length === 0) {
    console.error('‚ùå ERROR: No hay √°reas v√°lidas para inscribir al participante');
    return;
  }
  
  console.log('‚úÖ √Åreas v√°lidas para inscripci√≥n:', areasValidas.length);
  
  // SIMULACI√ìN DE LA RESTRICCI√ìN DE M√ÅXIMO 2 √ÅREAS
  console.log('\nüß™ PRUEBA: Simular inscripci√≥n con restricci√≥n de m√°ximo 2 √°reas\n');
  
  // Estructura para simular inscripciones del competidor en √°reas
  const inscripcionesSimuladas = [];
  
  for (let i = 0; i < areasValidas.length; i++) {
    const area = areasValidas[i];
    
    console.log(`üìù Intentando inscribir al competidor en √°rea: ${area.nombre} (${area.id})`);
    
    // Verificar si ya est√° inscrito en esta √°rea (simulaci√≥n)
    const yaInscrito = inscripcionesSimuladas.some(insc => insc.areaId === area.id);
    if (yaInscrito) {
      console.log('‚ö†Ô∏è El competidor ya est√° inscrito en esta √°rea');
      continue;
    }
    
    // Verificar si ya lleg√≥ al l√≠mite de 2 √°reas
    if (inscripcionesSimuladas.length >= 2) {
      console.error('‚ùå ERROR: El competidor ya est√° inscrito en 2 √°reas (m√°ximo permitido)');
      console.error('   No se puede inscribir en', area.nombre);
      continue;
    }
    
    // Simular inscripci√≥n exitosa
    inscripcionesSimuladas.push({
      id: Date.now() + i,
      competidorId: competidorId,
      areaId: area.id,
      areaNombre: area.nombre,
      fecha: new Date()
    });
    
    console.log('‚úÖ Inscripci√≥n simulada con √©xito en el √°rea', area.nombre);
  }
  
  console.log('\nüìã Resumen de inscripciones simuladas:');
  console.log(`- Competidor: ${competidor.id}`);
  console.log(`- Convocatoria: ${convocatoria.nombre_convocatoria}`);
  console.log(`- Total de √°reas disponibles: ${areasValidas.length}`);
  console.log(`- Total de inscripciones realizadas: ${inscripcionesSimuladas.length}`);
  
  inscripcionesSimuladas.forEach((insc, index) => {
    console.log(`  ${index + 1}. √Årea: ${insc.areaNombre} (${insc.areaId})`);
  });
  
  if (areasValidas.length > 2) {
    console.log('\n‚úÖ RESTRICCI√ìN VERIFICADA: No se permiti√≥ inscribir en m√°s de 2 √°reas');
  }
}

// Funci√≥n principal para ejecutar la simulaci√≥n
async function main() {
  try {
    // Buscar un competidor existente
    const competidor = await prisma.competidor.findFirst();
    if (!competidor) {
      console.error('‚ùå ERROR: No se encontr√≥ ning√∫n competidor en la base de datos');
      return;
    }
    
    // Buscar una convocatoria existente
    const convocatoria = await prisma.convocatoria.findFirst();
    if (!convocatoria) {
      console.error('‚ùå ERROR: No se encontr√≥ ninguna convocatoria en la base de datos');
      return;
    }
    
    // Buscar √°reas existentes
    const areas = await prisma.area.findMany({
      take: 3
    });
    
    if (areas.length === 0) {
      console.error('‚ùå ERROR: No se encontraron √°reas en la base de datos');
      return;
    }
    
    // Obtener los IDs de las √°reas
    const areaIds = areas.map(area => area.id);
    
    // Simular inscripci√≥n con restricci√≥n
    await simularInscripcion(competidor.id, areaIds, convocatoria.id);
    
  } catch (error) {
    console.error('‚ùå Error en la simulaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar la simulaci√≥n
main(); 