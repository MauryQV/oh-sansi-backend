generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                 String         @id @default(uuid())
  correo_electronico String         @unique
  nombre             String
  apellido           String
  estado             Boolean        @default(true)
  password           String
  rol_id             Int
  createdAt          DateTime       @default(now())
  competidor         Competidor?
  tutor              Tutor?
  role               Rol            @relation(fields: [rol_id], references: [id])
  Notificacion       Notificacion[]
}

model Rol {
  id       Int           @id @default(autoincrement())
  nombre   String        @unique
  roles    Rol_permiso[]
  usuarios Usuario[]
}

model Permiso {
  id          Int           @id @default(autoincrement())
  nombre      String        @unique
  descripcion String
  roles       Rol_permiso[]
}

model Rol_permiso {
  id         Int     @id @default(autoincrement())
  rol_id     Int
  permiso_id Int
  permiso    Permiso @relation(fields: [permiso_id], references: [id])
  rol        Rol     @relation(fields: [rol_id], references: [id])
}

model Competidor {
  id               String    @id @default(uuid())
  usuario_id       String    @unique
  colegio_id       Int
  provincia_id     Int
  carnet_identidad String    @unique
  fecha_nacimiento DateTime
  colegio          Colegio   @relation(fields: [colegio_id], references: [id])
  provincia        Provincia @relation(fields: [provincia_id], references: [id])
  usuario          Usuario   @relation(fields: [usuario_id], references: [id])

  Inscripciones Inscripcion_tutor[]
  Inscripcion   Inscripcion[]
}

model Tutor {
  id                  String              @id @default(uuid())
  usuario_id          String              @unique
  carnet_identidad    String              @unique
  numero_celular      String              @unique
  area_id             Int
  Inscripciones_tutor Inscripcion_tutor[]
  area                Area                @relation(fields: [area_id], references: [id])
  usuario             Usuario             @relation(fields: [usuario_id], references: [id])
}

model Departamento {
  id                  Int         @id @default(autoincrement())
  nombre_departamento String
  Provincia           Provincia[]
}

model Provincia {
  id               Int          @id @default(autoincrement())
  nombre_provincia String
  departamento_id  Int
  Colegio          Colegio[]
  Competidor       Competidor[]
  departamento     Departamento @relation(fields: [departamento_id], references: [id])
}

model Colegio {
  id             Int          @id @default(autoincrement())
  nombre_colegio String
  provincia_id   Int
  provincia      Provincia    @relation(fields: [provincia_id], references: [id])
  Competidores   Competidor[]
}

model Convocatoria {
  id                       Int                 @id @default(autoincrement())
  nombre_convocatoria      String
  id_estado_convocatoria   Int
  fecha_inicio             DateTime
  fecha_fin                DateTime
  pago_fin                 DateTime
  pago_inicio              DateTime
  competicion_inicio       DateTime
  competicion_fin          DateTime
  descripcion_convocatoria String
  Area_convocatoria        Area_convocatoria[]
  estado_convocatoria      estado_convocatoria @relation(fields: [id_estado_convocatoria], references: [id])
  Inscripcion              Inscripcion[]
}

model Area {
  id                Int                 @id @default(autoincrement())
  nombre_area       String
  descripcion_area  String
  costo             Decimal             @db.Decimal(10, 2)
  Area_convocatoria Area_convocatoria[]
  area_categoria    Categoria_area[]

  Tutor       Tutor[]
  Inscripcion Inscripcion[]
}

model Categoria {
  id                     Int              @id @default(autoincrement())
  nombre_categoria       String
  grado_min_id           Int
  grado_max_id           Int
  descripcion_cat        String
  grado_max              Grado            @relation("GradoMax", fields: [grado_max_id], references: [id])
  grado_min              Grado            @relation("GradoMin", fields: [grado_min_id], references: [id])
  Categoria_convocatoria Categoria_area[]
  Inscripcion            Inscripcion[]
}

model Grado {
  id             Int         @id @default(autoincrement())
  nombre_grado   String
  id_nivel       Int
  categorias_max Categoria[] @relation("GradoMax")
  categorias_min Categoria[] @relation("GradoMin")
  nivel          Nivel       @relation(fields: [id_nivel], references: [id])
}

model Pago {
  id             Int         @id @default(autoincrement())
  inscripcion_id Int
  monto          Decimal     @db.Decimal(10, 2)
  estado         String      @default("Pendiente")
  codigo_pago    String      @unique
  fecha_pago     DateTime    @default(now())
  metodo_pago_id Int
  inscripcion    Inscripcion @relation(fields: [inscripcion_id], references: [id])
  metodo_pago    Metodo_pago @relation(fields: [metodo_pago_id], references: [id])
}

model Area_convocatoria {
  id              Int          @id @default(autoincrement())
  area_id         Int
  convocatoria_id Int
  area            Area         @relation(fields: [area_id], references: [id])
  convocatoria    Convocatoria @relation(fields: [convocatoria_id], references: [id], onDelete: Cascade)
}

model Categoria_area {
  id           Int       @id @default(autoincrement())
  categoria_id Int
  area_id      Int
  area         Area      @relation(fields: [area_id], references: [id])
  categoria    Categoria @relation(fields: [categoria_id], references: [id])
}

model Inscripcion_tutor {
  id                  Int             @id @default(autoincrement())
  inscripcion_id      Int
  tutor_id            String
  aprobado            Boolean         @default(false)
  fecha_aprobacion    DateTime?
  motivo_rechazo_id   Int? //campo opcional para el motivo de rechazo :v 
  descripcion_rechazo String?
  inscripcion         Inscripcion     @relation(fields: [inscripcion_id], references: [id])
  tutor               Tutor           @relation(fields: [tutor_id], references: [id])
  Competidor          Competidor?     @relation(fields: [competidorId], references: [id])
  competidorId        String?
  MotivoRechazo       Motivo_rechazo? @relation(fields: [motivo_rechazo_id], references: [id])
}

model Metodo_pago {
  id     Int    @id @default(autoincrement())
  nombre String @unique
  Pago   Pago[]
}

model estado_convocatoria {
  id           Int            @id @default(autoincrement())
  nombre       String         @unique
  Convocatoria Convocatoria[]
}

model Inscripcion {
  id                 Int                 @id @default(autoincrement())
  competidor_id      String
  area_id            Int
  convocatoria_id    Int
  categoria_id       Int
  fecha_inscripcion  DateTime            @default(now())
  estado_inscripcion String              @default("Pendiente") // Pendiente, Aceptada, Rechazada
  tutorInscripciones Inscripcion_tutor[]
  pagos              Pago[]

  competidor   Competidor   @relation(fields: [competidor_id], references: [id])
  area         Area         @relation(fields: [area_id], references: [id])
  convocatoria Convocatoria @relation(fields: [convocatoria_id], references: [id])
  categoria    Categoria    @relation(fields: [categoria_id], references: [id])
}

model Nivel {
  id           Int     @id @default(autoincrement())
  nombre_nivel String
  Grado        Grado[]
}

model Notificacion {
  id        Int      @id @default(autoincrement())
  usuarioId String
  tipo      String // ejemplo: "solicitud", "respuesta"
  mensaje   String
  leido     Boolean  @default(false)
  createdAt DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model Motivo_rechazo {
  id                 Int                 @id @default(autoincrement())
  mensaje            String
  inscripcionesTutor Inscripcion_tutor[]
}
